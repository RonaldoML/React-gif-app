{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpert","categories","c","ReactDOM","render","document","getElementById"],"mappings":"sMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAoB5C,OACI,0BAAMC,SAbW,SAACC,GAElBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BR,EAAc,CAACE,IAEfC,EAAc,OAOd,2BACIM,KAAK,OACLC,MAASR,EACTS,SArBc,SAACN,GACvBF,EAAcE,EAAEO,OAAOF,Y,uBCPlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAUH,GAF9C,+DAIAI,MAAMF,GAJN,cAIbG,EAJa,gBAMIA,EAAKC,OANT,uBAMXC,EANW,EAMXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAClB,IAAD,EACI,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAb3B,kBAgBZM,GAhBY,4CAAH,sDCEPO,EAAc,SAAC,GAAiB,IAAhBH,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAC/B,OACI,yBAAKc,UAAU,0CACX,yBACIC,IAAMf,EACNgB,IAAQN,IAEZ,2BAAIA,KCNHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECDX,SAACA,GAAa,IAAD,EACXb,mBAAS,CAC/BoB,KAAM,GACNa,SAAS,IAHwB,mBAC9BC,EAD8B,KACvBC,EADuB,KAgBrC,OAVAC,qBAAU,WAENxB,EAAQC,GACPwB,MAAK,SAAAC,GAAI,OAAIH,EAAS,CACnBf,KAAMkB,EACNL,SAAS,SAGf,CAACpB,IAEIqB,EDbwBK,CAAa1B,GAA/Ba,EAFsB,EAE5BN,KAAaa,EAFe,EAEfA,QAEpB,OACI,oCACI,4BAAKpB,GACJoB,GAAW,yCACZ,yBAAKJ,UAAU,aAGPH,EAAOJ,KAAK,SAACC,GAAD,OACR,kBAAC,EAAD,eACIiB,IAAKjB,EAAIC,IACJD,UEmBlBkB,EAhCG,WAAO,IAAD,EAEgBzC,mBAAS,CAAC,sBAF1B,mBAEb0C,EAFa,KAED3C,EAFC,KAIpB,OACI,oCACI,4CAIA,kBAAC,EAAD,CAAaA,cAAiBA,IAE9B,6BAGA,4BAEI2C,EAAWpB,KAAK,SAAAqB,GAAC,OAET,kBAAC,EAAD,CACIH,IAAMG,EACN9B,SAAY8B,UCrBxCC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.7cb26852.chunk.js","sourcesContent":["import React,{useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e)=>{\r\n        setInputValue(e.target.value);\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n\r\n        e.preventDefault();\r\n\r\n        if(inputValue.trim().length > 2){\r\n            setCategories([inputValue]);\r\n            //setCategories(c => [...c, inputValue]);\r\n            setInputValue('');\r\n        }\r\n\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type='text'\r\n                value = {inputValue}\r\n                onChange={handleInputChange}\r\n            />\r\n        </form>\r\n    );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired,\r\n};","\r\nexport const getGifs = async(category) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=20&api_key=36Hfwk35EKQ3Ryr0sS1MBFlU85g0arCA`;\r\n\r\n    const resp = await fetch(url);\r\n\r\n    const { data } = await resp.json();\r\n    \r\n    const gifs = data.map( img => \r\n        {\r\n            return {\r\n                id: img.id,\r\n                title: img.title,\r\n                url: img.images?.downsized_medium.url\r\n            }\r\n        });\r\n    return gifs;\r\n};","\r\nimport React from 'react'\r\n\r\nexport const GifGridItem = ({title,url}) => {\r\n    return (\r\n        <div className='card animate__animated animated_fadeIn'>\r\n            <img\r\n                src={ url }\r\n                alt = { title }\r\n            />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport {GifGridItem} from '../components/GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    const {data: images,loading} = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n            <h3>{category}</h3>\r\n            {loading && <p>Loading...</p>}\r\n            <div className='card-grid'>\r\n                \r\n                {\r\n                    images.map( (img) => (\r\n                        <GifGridItem \r\n                            key={img.id} \r\n                            { ...img} > \r\n                        </GifGridItem>\r\n                    ))\r\n                }\r\n                \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from 'react'\r\nimport {getGifs} from '../helpers/getGifs'\r\n\r\nexport const useFetchGifs = (category) =>{\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(()=>{\r\n\r\n        getGifs(category)\r\n        .then(imgs => setState({\r\n            data: imgs,\r\n            loading: false\r\n        }));\r\n\r\n    },[category]);\r\n\r\n    return state;\r\n};","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n\r\nconst GifExpert = () => {\r\n\r\n    const [categories, setCategories] = useState(['League of Legends']);\r\n\r\n    return (\r\n        <>\r\n            <h2>\r\n                Gif Searcher\r\n            </h2>\r\n\r\n            <AddCategory setCategories = {setCategories}/>\r\n            \r\n            <hr />\r\n            \r\n\r\n            <ol>\r\n                { \r\n                categories.map( c => \r\n                    (\r\n                        <GifGrid \r\n                            key= {c}\r\n                            category = {c}\r\n                        />\r\n                    )) \r\n                }\r\n            </ol>\r\n            \r\n        </>\r\n    );\r\n\r\n};\r\n\r\nexport default GifExpert;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpert from '../src/GifExpertApp';\n\nReactDOM.render(\n    <GifExpert />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}